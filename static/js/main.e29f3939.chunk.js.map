{"version":3,"sources":["components/maps/Maps.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["Maps","this","props","address","erro","react_default","a","createElement","className","logradouro","bairro","localidade","uf","cep","Component","Search","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","dataAddress","handleSubmit","bind","assertThisInitialized","event","_this2","preventDefault","apiRest","target","value","fetchJsonp","jsonpCallback","then","response","json","setState","catch","error","console","log","viewMap","components_maps_Maps","onSubmit","react_input_mask_default","type","id","name","mask","App","components_search_Search","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","react_router","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mWAiCeA,0LA5BX,OAAIC,KAAKC,MAAMC,QAAQC,KAEnBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,qEAONF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAIN,KAAKC,MAAMC,QAAQM,aAC3BJ,EAAAC,EAAAC,cAAA,YAAON,KAAKC,MAAMC,QAAQO,QAC1BL,EAAAC,EAAAC,cAAA,YAAON,KAAKC,MAAMC,QAAQQ,WAA1B,MAAyCV,KAAKC,MAAMC,QAAQS,IAC5DP,EAAAC,EAAAC,cAAA,YAAON,KAAKC,MAAMC,QAAQU,eApBrBC,cC2EJC,cArEb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAhB,KAAAc,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAAhB,KAAAgB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAApB,QACKqB,MAAQ,CACXC,YAAa,MAEfP,EAAKQ,aAAeR,EAAKQ,aAAaC,KAAlBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KALRA,4EAQDW,GAAO,IAAAC,EAAA3B,KAElB0B,EAAME,iBACN,IACMC,EAAU,4BADJH,EAAMI,OAAOlB,IAAImB,MACuB,SAEpDC,IAAWH,EAAS,CAClBI,cAAe,aACdC,KAAK,SAAUC,GAChB,OAAOA,EAASC,SACfF,KAAK,SAAAZ,GACNK,EAAKU,SAAS,CAAEf,kBACfgB,MAAM,SAAUC,GACjBC,QAAQC,IAAI,iBAAkBF,sCAOhC,IAAIG,EAMJ,OAJ+B,OAA3B1C,KAAKqB,MAAMC,cACboB,EAAUtC,EAAAC,EAAAC,cAACqC,EAAD,CAAMzC,QAASF,KAAKqB,MAAMC,eAIpClB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcqC,SAAU5C,KAAKuB,cAC3CnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAACuC,EAAAxC,EAAD,CAAWyC,KAAK,OAAOC,GAAG,OAAOC,KAAK,MAAMC,KAAK,YAAY1C,UAAU,0BAEzEH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBAAlB,cAKPmC,UArDY7B,aCONqC,mLARX,OACE9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC6C,EAAD,cAJUtC,aCQEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8ECXNC,IAASC,OACLtD,EAAAC,EAAAC,cAACqD,EAAA,EAAD,KACIvD,EAAAC,EAAAC,cAACsD,EAAA,EAAD,KACIxD,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWZ,MAGjCa,SAASC,eAAe,SDoHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.e29f3939.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Maps.scss';\n\nclass Maps extends Component {\n  render() {\n    if (this.props.address.erro) {\n      return (\n        <div className=\"row justify-content-md-center\">\n          <div className=\"col-md-6\">\n            <div className=\"content-map\">\n              <p>Não foi possivel localizar o endereço digitado.</p>\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"row justify-content-md-center\">\n          <div className=\"col-md-6\">\n            <div className=\"content-map\">\n              <h5><b>{this.props.address.logradouro}</b></h5>\n              <span>{this.props.address.bairro}</span>\n              <span>{this.props.address.localidade} - {this.props.address.uf}</span>\n              <span>{this.props.address.cep}</span>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n  }\n}\n\nexport default Maps;","import React, { Component } from 'react';\nimport './Search.scss';\nimport fetchJsonp from 'fetch-jsonp';\nimport InputMask from 'react-input-mask';\nimport PropTypes from 'prop-types';\nimport Maps from '../maps/Maps';\n\nclass Search extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      dataAddress: null\n    }\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n\n    event.preventDefault();\n    const cep = event.target.cep.value;\n    const apiRest = 'https://viacep.com.br/ws/' + cep + '/json/';\n\n    fetchJsonp(apiRest, {\n      jsonpCallback: 'callback',\n    }).then(function (response) {\n      return response.json()\n    }).then(dataAddress => {\n      this.setState({ dataAddress })\n    }).catch(function (error) {\n      console.log('parsing failed', error)\n    })\n\n  }\n\n  render() {\n\n    let viewMap;\n\n    if (this.state.dataAddress !== null) {\n      viewMap = <Maps address={this.state.dataAddress} />\n    }\n\n    return (\n      <div>\n        <div className=\"row justify-content-md-center\">\n          <div className=\"col-md-6\">\n            <h2>Consulta de endereço</h2>\n            <div className=\"bg-header\">\n              <h6>Consultar</h6>\n              <form className=\"form-inline\" onSubmit={this.handleSubmit}>\n                <div className=\"form-group\">\n                  <label>CEP</label>\n                  <InputMask type=\"text\" id=\"cep \" name=\"cep\" mask=\"99999-999\" className=\"form-control mx-sm-2\" />\n                </div>\n                <button className=\"btn btn-primary\">Buscar</button>\n              </form>\n            </div>\n          </div>\n        </div>\n        {viewMap}\n      </div>\n    );\n  }\n}\n\nSearch.propTypes = {\n  cep: PropTypes.string,\n  logradouro: PropTypes.string,\n  complemento: PropTypes.number,\n  bairro: PropTypes.string,\n  localidade: PropTypes.string,\n  uf: PropTypes.string,\n  unidade: PropTypes.number,\n  ibge: PropTypes.number,\n  gia: PropTypes.number\n};\n\nexport default Search;","import React, { Component } from 'react';\nimport './App.scss';\nimport Search from './components/search/Search';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <Search />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Switch>\n            <Route path=\"/\" component={App} />\n        </Switch>\n    </ BrowserRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}